-- Enable pg_crypto extension for UUID generation
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Enable pg_net extension for HTTP requests (optional for future email notifications)
CREATE EXTENSION IF NOT EXISTS pg_net;

-- Create enum type for booking status
CREATE TYPE booking_status AS ENUM ('pending', 'confirmed', 'cancelled');

-- Create profiles table (extends auth.users)
CREATE TABLE profiles (
  id UUID REFERENCES auth.users ON DELETE CASCADE,
  full_name TEXT NOT NULL,
  email TEXT NOT NULL,
  phone TEXT,
  avatar_url TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  PRIMARY KEY (id)
);

-- Add unique constraint on email
ALTER TABLE profiles ADD CONSTRAINT profiles_email_key UNIQUE (email);

-- Create rooms table
CREATE TABLE rooms (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  room_type TEXT NOT NULL,
  description TEXT,
  price_per_night NUMERIC(10, 2) NOT NULL,
  capacity INTEGER NOT NULL,
  amenities TEXT[],
  image_urls TEXT[],
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create bookings table
CREATE TABLE bookings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,
  room_id UUID REFERENCES rooms(id) ON DELETE SET NULL,
  room_type TEXT NOT NULL,
  check_in_date TIMESTAMPTZ NOT NULL,
  check_out_date TIMESTAMPTZ NOT NULL,
  guests INTEGER NOT NULL,
  total_price NUMERIC(10, 2) NOT NULL,
  status booking_status NOT NULL DEFAULT 'pending',
  special_requests TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),
  CONSTRAINT valid_dates CHECK (check_out_date > check_in_date)
);

-- Create indexes for better performance
CREATE INDEX idx_bookings_user_id ON bookings(user_id);
CREATE INDEX idx_bookings_status ON bookings(status);
CREATE INDEX idx_bookings_dates ON bookings(check_in_date, check_out_date);

-- Enable Row Level Security
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE rooms ENABLE ROW LEVEL SECURITY;
ALTER TABLE bookings ENABLE ROW LEVEL SECURITY;

-- ====================
-- RLS POLICIES
-- ====================

-- Profiles RLS Policies
-- Users can view their own profile
CREATE POLICY "Users can view their own profile" 
ON profiles FOR SELECT 
USING (auth.uid() = id);

-- Users can update their own profile
CREATE POLICY "Users can update their own profile" 
ON profiles FOR UPDATE 
USING (auth.uid() = id);

-- Bookings RLS Policies
-- Users can view their own bookings
CREATE POLICY "Users can view their own bookings" 
ON bookings FOR SELECT 
USING (auth.uid() = user_id);

-- Users can create bookings
CREATE POLICY "Users can create bookings" 
ON bookings FOR INSERT 
WITH CHECK (auth.uid() = user_id);

-- Users can update their own bookings (only if status is pending)
CREATE POLICY "Users can update pending bookings" 
ON bookings FOR UPDATE 
USING (auth.uid() = user_id AND status = 'pending');

-- Users can cancel their own bookings
CREATE POLICY "Users can cancel bookings" 
ON bookings FOR UPDATE 
USING (
  auth.uid() = user_id AND 
  (status = 'pending' OR status = 'confirmed') AND
  bookings.status = 'cancelled' -- Only allow updating status to cancelled
);

-- Rooms RLS Policies
-- Allow public read access to rooms
CREATE POLICY "Enable public read access for rooms" 
ON rooms FOR SELECT 
TO public
USING (true);

-- ====================
-- FUNCTIONS & TRIGGERS
-- ====================

-- Function to automatically create profile when a new user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS TRIGGER AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name, email)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.email);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to run the function when a new user is created
CREATE TRIGGER on_auth_user_created
AFTER INSERT ON auth.users
FOR EACH ROW
EXECUTE PROCEDURE public.handle_new_user();

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION public.update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers to update timestamps
CREATE TRIGGER update_profiles_timestamp
BEFORE UPDATE ON profiles
FOR EACH ROW
EXECUTE PROCEDURE public.update_timestamp();

CREATE TRIGGER update_bookings_timestamp
BEFORE UPDATE ON bookings
FOR EACH ROW
EXECUTE PROCEDURE public.update_timestamp();

CREATE TRIGGER update_rooms_timestamp
BEFORE UPDATE ON rooms
FOR EACH ROW
EXECUTE PROCEDURE public.update_timestamp();

-- Function to calculate booking price
CREATE OR REPLACE FUNCTION public.calculate_booking_price()
RETURNS TRIGGER AS $$
DECLARE
  room_price NUMERIC(10, 2);
  nights INTEGER;
BEGIN
  -- Get room price
  SELECT price_per_night INTO room_price
  FROM rooms
  WHERE id = NEW.room_id;
  
  -- Calculate number of nights
  nights := (NEW.check_out_date::date - NEW.check_in_date::date);
  
  -- Set total price
  NEW.total_price := room_price * nights;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to calculate booking price before insert
CREATE TRIGGER calculate_booking_price_trigger
BEFORE INSERT ON bookings
FOR EACH ROW
EXECUTE PROCEDURE public.calculate_booking_price();

-- ====================
-- SAMPLE DATA
-- ====================

-- Insert sample rooms (run this after creating the tables)
INSERT INTO rooms (room_type, description, price_per_night, capacity, amenities, image_urls)
VALUES 
  ('Standard', 'Comfortable standard room with all basic amenities', 120.00, 2, 
   '{"WiFi", "TV", "Air Conditioning", "Coffee Maker"}', 
   '{"https://example.com/standard1.jpg", "https://example.com/standard2.jpg"}'),
  
  ('Deluxe', 'Spacious deluxe room with premium amenities', 180.00, 2, 
   '{"WiFi", "TV", "Air Conditioning", "Mini Bar", "Coffee Maker", "Safe"}', 
   '{"https://example.com/deluxe1.jpg", "https://example.com/deluxe2.jpg"}'),
  
  ('Suite', 'Luxurious suite with separate living area', 250.00, 4, 
   '{"WiFi", "TV", "Air Conditioning", "Mini Bar", "Coffee Maker", "Safe", "Jacuzzi"}', 
   '{"https://example.com/suite1.jpg", "https://example.com/suite2.jpg"}'),
  
  ('Family', 'Large family room with extra beds', 200.00, 4, 
   '{"WiFi", "TV", "Air Conditioning", "Coffee Maker", "Crib"}', 
   '{"https://example.com/family1.jpg", "https://example.com/family2.jpg"}'),
  
  ('Executive', 'Executive room with work desk and premium services', 220.00, 2, 
   '{"WiFi", "TV", "Air Conditioning", "Mini Bar", "Coffee Maker", "Safe", "Work Desk"}', 
   '{"https://example.com/executive1.jpg", "https://example.com/executive2.jpg"}');

-- ====================
-- STORAGE SETUP
-- ====================

-- Set up storage buckets for user avatars and room images
INSERT INTO storage.buckets (id, name, public)
VALUES 
  ('avatars', 'avatars', true),
  ('room_images', 'room_images', true);

-- Create storage policies for avatars
CREATE POLICY "Users can upload their own avatar" 
ON storage.objects FOR INSERT 
TO authenticated
WITH CHECK (bucket_id = 'avatars' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can view their own avatar" 
ON storage.objects FOR SELECT 
TO authenticated
USING (bucket_id = 'avatars' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can update their own avatar" 
ON storage.objects FOR UPDATE 
TO authenticated
USING (bucket_id = 'avatars' AND auth.uid()::text = (storage.foldername(name))[1]);

CREATE POLICY "Users can delete their own avatar" 
ON storage.objects FOR DELETE 
TO authenticated
USING (bucket_id = 'avatars' AND auth.uid()::text = (storage.foldername(name))[1]);

-- Create storage policies for room images (admin only)
CREATE POLICY "Only admins can manage room images" 
ON storage.objects 
FOR ALL 
TO authenticated
USING (bucket_id = 'room_images' AND auth.role() = 'admin');